import sys
import heapq

INF = int(1e9)
# 어떤 나라에는 N개의 도시가 있다. 그리고 각 도시는 보내고자 하는 메시지가 있는 경우, 다른 도시로 전보를 보내서 다른 도시로 해당 메시지를 전송할 수 있다.
  하지만 X라는 도시에서 Y라는 도시로 전보를 보내고자 한다면, 도시 X에서 Y로 향하는 통로가 설치되어 있어야 한다. 또한 통로를 거쳐 메시지를 보낼 때는 일정 시간(Z)이 소요된다.
  어느 날 C라는 도시에서 위급 상황이 발생해서 최대한 많은 도시로 메시지를 보내고자 한다. 메시지는 C도시에서 출발하여 각 도시 사이에 설치된 통로를 거쳐, 최대한 많이 퍼져나갈 것이다.
  각 도시의 번호와 통로가 설치되어 잇는 정보가 주어졌을 때, 도시 C에서 보낸 메시지를 받게 되는 도시의 개수는 총 몇 개이며 도시들이 모두 메시지를 받는 데까지 걸리는 시간은 얼마인지
  계산하는 프로그램을 작성하시오.
  ex) 3 2 1 -> 도시개수 통로개수 도시(출발) N M C
      1 2 4 
      1 3 2 -> 통로에 대한 정보 X Y Z


input = sys.stdin.readline

n, m, start = map(int, input().split())

times = [INF] * (n + 1)

graph = [[] for i in range(n + 1)]
for i in range(m):
    x, y, z = map(int, input().split())
    graph[x].append((y, z))

def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start))
    times[start] = 0
    while q:
        time, now = heapq.heappop(q)
        if time > times[now]:
            continue
        for i in graph[now]:
            cost = time + i[1]
            if cost < times[i[0]]:
                times[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

dijkstra(start)

total = 0
max_time = 0
for t in times:
    if t != INF and t != 0:
        total += 1
        max_time = max(max_time, t)

print(total, max_time)
