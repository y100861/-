# N * M 크기의 지사격형에서 각각의 칸은 육지(0) 또는 바다(1)이고 캐릭터는 북(0)동(1)남(2)서(3) 중 한 곳을 바라본다. 맵의 각 칸은 (A,B)로 나타낼 수 있고,
  A는 북족으로부터 떨어진 칸의 개수, B는 서쪽으로부터 떨어진 칸의 개수이다. 캐릭터는 상하좌우로 움직일 수 있고, 바다로 되어 있는 공간에는 갈 수 없다. 
  1. 현재 위치에서 현재 방향을 기준으로 왼쪽 방향(반시계 방향으로 90도 회전한 방향)부터 차례대로 갈 곳을 정한다.
  2. 캐릭터의 바로 왼쪽 방향에 아직 가보지 않은 칸이 존재한다면, 왼쪽 방향으로 회전한 다음 왼쪽으로 한 칸을 전진한다. 왼쪽 방향으로 회전만 수행하고 1단계로 돌아간다.
  3. 만약 네 방향 모두 이미 가본 칸이거나 바다로 되어있는 칸인 경우에는, 바라보는 방향을 유지한 채로 한 칸 뒤로 가고 1단계로 돌아간다. 단, 이때 뒤쪽 방향이 바다인 칸이라 뒤로 갈 수 없는 경우
     움직임을 멈춘다.
  위 메뉴얼에 따라 캐릭터를 이동시킨 뒤에, 캐릭터가 방문한 칸의 수를 출력하시오.
  
N, M = map(int, input().split())

# 처음 위치와 방향
x, y, direction = map(int, input().split())
# 방문한 위치를 저장하기 위한 맵을 생성하여 0으로 초기화.
d = [[0] * M for _ in range(N)]
# 현재 위치를 방문한 위치로 처리.
d[x][y] = 1

# 맵 정보 입력하기.(옥지, 바다)
array = []
for i in range(N):
    array.append(list(map(int, input().split())))

# 북, 동, 남, 서 정의
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

# 시뮬레이션 시작
count = 1
turn_time = 0
while True:
    direction -= 1
    if direction == -1:
        direction = 3
    nx = x + dx[direction]
    ny = y + dy[direction]
    if d[nx][ny] == 0 and array[nx][ny] == 0:
        d[nx][ny] = 1
        x = nx
        y = ny
        count += 1
        turn_time = 0
        continue
    else:
        turn_time += 1
    # 네 방향 모두 갈 수 없는 경우
    if turn_time == 4:
        nx = x - dx[direction]
        ny = y - dy[direction]
        # 뒤로 갈 수 있다면 뒤로 가기
        if array[nx][ny] == 0:
            x = nx
            y = ny
        # 뒤가 바다로 막혀있는 경우 종료.
        else:
            break
        turn_time = 0

print(count)
