# 학교에서 학생들에게 0번부터 N번까지의 번호를 부여했다. 처음에는 모든 학생이 서로 다른 팀으로 구분되어, 총 N+1개의 팀이 존재한다. 이때 선생님은 '팀 합치기' 연산과 '같은 팀 여부 확인' 연산을
  사용할 수 있다.
  1. '팀 합치기' 연산은 두 팀을 합치는 연산이다.
  2. '같은 팀 여부 확인' 연산은 특정한 두 학생이 같은 팀에 속하는지를 확인하는 연산이다.
  선생님이 M개의 연산을 수행할 수 있을 때, '같으 팀 여부 확인' 연산에 대해 연산 겨로가를 출력하는 프로그램을 작성하시오.
  ex) 7 8  =>   0은 '팀 합치기 연산' / 1은 '같은 팀 여부 확인'
      0 1 3
      1 1 7  NO
      0 7 6
      1 7 1  NO
      0 3 7
      0 4 2
      0 1 1
      1 1 1  YES
      
      
def find_parent(parent, x):
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

n, m = map(int, input().split())

parent = [0] * (n + 1)
for i in range(n + 1):
    parent[i] = i

for i in range(m):
    x, a, b = list(map(int, input().split()))
    if x == 0:
        union_parent(parent, a, b)
    elif x == 1:
        if find_parent(parent, a) == find_parent(parent, b):
            print("YES")
        else:
            print("NO")
